//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : OptimizedVmeAdapter.h
//  @ Date : 08/06/2012
//  Author: Emanuele Galli
//   *  Copyright 2012 Sky-Technologies Srl.
//
#include "OptimizedVmeAdapter.h"
#include "Singleton.h"
#include "ConfigFile.h"
#include <iostream>


OptimizedVmeAdapter::OptimizedVmeAdapter() {
    _devHandle = -1;
    _devOptHandle = -1;
    _vmeOptBaseAddress = VME_OPT_DEFAULT_ADDR;
	_pInterruptHandler = NULL;
}

OptimizedVmeAdapter::~OptimizedVmeAdapter() {
	closeDevice();
	if(_pInterruptHandler != NULL){
	    _pInterruptHandler->Stop();
		delete _pInterruptHandler;
	}
}

void OptimizedVmeAdapter::initBoard() throw (std::string) {
	_vmeOptBaseAddress = VME_OPT_DEFAULT_ADDR;
	_currentOpbDataWidth = EN_VME_D16;
	_devHandle = init_board(EN_LSI_0,VME_ADDRESS_LOWER, EN_VME_D32);
	if (_devHandle < 0)
		throw std::string("PCI Image Device of 32bit Initialization Error");
	_devOptHandle = init_board(EN_LSI_1,_vmeOptBaseAddress, _currentOpbDataWidth);
	if(_devOptHandle < 0)
		throw std::string("PCI Image Device of 16bit Initialization Error");
	_ctlHandle = init_interrupt_board();
	if (_ctlHandle < 0)
		throw std::string("Control Device Initialization Error");
}

void OptimizedVmeAdapter::closeDevice() throw (std::string) {
	_pInterruptHandler->Stop();
	if (close_device(_devHandle) < 0)
		throw std::string("Close Device Error");
	if (close_device(_devOptHandle) < 0)
		throw std::string("Close Device Error");
	if (close_device(_ctlHandle) < 0)
		throw std::string("Close Ctl Error");
}

void OptimizedVmeAdapter::write8(UINT32 regAddr, UINT8 value)
		throw (std::string) {
	if (updateVmeAddress(regAddr) < 0) {
		throw std::string("Open Image fails");
	}

	if (openbus_write8(_devOptHandle, regAddr & 0xFFFF, value) < 0)
		throw std::string("Write Error");
}

void OptimizedVmeAdapter::write16(UINT32 regAddr, UINT16 value)
		throw (std::string) {
	if (updateVmeAddress(regAddr) < 0) {
		throw std::string("Open Image fails");
	}

	if (openbus_write(_devOptHandle, regAddr & 0xFFFF, value) < 0)
		throw std::string("Write Error");
}

void OptimizedVmeAdapter::write24(UINT32 regAddr, UINT32 value)
		throw (std::string) {
	if (updateVmeAddress(regAddr, EN_VME_D32) < 0) {
		throw std::string("Open Image fails");
	}

	if (openbus_write24(_devOptHandle, regAddr & 0xFFFF, value & 0xFFFFFF) < 0)
		throw std::string("Write Error");
}

void OptimizedVmeAdapter::write32(UINT32 regAddr, UINT32 val)
		throw (std::string) {
	if (updateVmeAddress(regAddr, EN_VME_D32) < 0) {
		throw std::string("Open Image fails");
	}

	if (openbus_write32(_devOptHandle, regAddr & 0xFFFF, val) < 0)
		throw std::string("Write Error");
}

UINT8 OptimizedVmeAdapter::read8(UINT32 regAddr16) throw (std::string) {
	int val = 0;
	if (updateVmeAddress(regAddr16) < 0) {
		throw std::string("Open Image fails");
	}

	if ((val = openbus_read8(_devOptHandle, regAddr16 & 0xFFFF)) < 0)
		throw std::string("Read Error");
	return (UINT8) val;
}

UINT16 OptimizedVmeAdapter::read16(UINT32 regAddr16) throw (std::string) {
	int val = 0;
	if (updateVmeAddress(regAddr16) < 0) {
		throw std::string("Open Image fails");
	}

	if ((val = openbus_read(_devOptHandle, regAddr16 & 0xFFFF)) < 0)
		throw std::string("Read Error");
	return (UINT16) val;
}

UINT32 OptimizedVmeAdapter::read24(UINT32 regAddr16) throw (std::string) {
	int val = 0;
	if (updateVmeAddress(regAddr16, EN_VME_D32) < 0) {
		throw std::string("Open Image fails");
	}

	if ((val = openbus_read24(_devOptHandle, regAddr16 & 0xFFFF)) < 0)
		throw std::string("Read Error");
	return (UINT32) val;
}

UINT32 OptimizedVmeAdapter::read32(UINT32 regAddr32) throw (std::string) {
	int val = 0;
	if (updateVmeAddress(regAddr32, EN_VME_D32) < 0) {
		throw std::string("Open Image fails");
	}

	UINT8 on_error = 0;
	if ((val = openbus_read32(_devOptHandle, regAddr32 & 0xFFFF, &on_error)) < 0) {
		if (on_error)
			throw std::string("Read Error");
	}
	return (UINT32) val;
}

UINT32 OptimizedVmeAdapter::readRegister(UINT32 regAddr) throw(std::string){
	UINT8 on_error = 0;
	int val = 0;
	if ((val = openbus_read32(_devHandle, regAddr & 0xFFFF, &on_error)) < 0) {
		if (on_error)
			throw std::string("Read Error");
	}
	return (UINT32) val;
}

void OptimizedVmeAdapter::writeRegister(UINT32 regAddr, UINT32 val) throw(std::string){
	if (openbus_write32(_devHandle, regAddr & 0xFFFF, val) < 0)
		throw std::string("Write Error");
}

void OptimizedVmeAdapter::readInterruptStatus(UINT32* status) throw(std::string){
	if(openbus_ReadInterrupt(_ctlHandle,status) != 0){
		throw std::string("Read Interrupt Info Fails");
	}
	//Reset Interrupt
	write32(Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT16>("VME_INTERRUPT_RESET", hexadecimal),0);
}

void OptimizedVmeAdapter::waitInterrupt(const UINT32 &time) throw(int){
	if(openbus_WaitInterruptVIRQ1(_ctlHandle, time) != 0){
		std::cerr << "Wait interrupt error" << std::endl;
		throw 0;
	}
}

int OptimizedVmeAdapter::updateVmeAddress(const UINT32 addr, const UINT32 data_width) {
	if (((addr & 0xFFFF0000) != _vmeOptBaseAddress) || (_currentOpbDataWidth != data_width)) {
		_vmeOptBaseAddress = addr & 0xFFFF0000;
		if (open_image(_devOptHandle, _vmeOptBaseAddress, data_width) < 0) {
			return -1;
		}
		_currentOpbDataWidth = data_width;
	}

	return 0;
}

void OptimizedVmeAdapter::interruptCallback(void *arg){
	UINT32 status;
	OptimizedVmeAdapter *pAdapter;
	pAdapter = (OptimizedVmeAdapter *)arg;

	openbus_ReadInterrupt(pAdapter->_ctlHandle,&status);
	//Reset Interrupt
	pAdapter->write32(Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT16>("VME_INTERRUPT_RESET", hexadecimal),0);

	//Call External callback
	pAdapter->getExternalCallback()(status);

}
