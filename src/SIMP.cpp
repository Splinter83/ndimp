//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : SIMP.cpp
//  @ Date : 08/06/2012
//  @ Author : 
//
//

//TODO da rivedere. Dipendono da SGA?
#define BASE_ADDRESS_SGA2 0x28000000
#define BASE_ADDRESS_SGA3 0x30000000
#define RAM_SIZE 0x20000 //128Kbytes

#define FOFE 0x39DEF
#define LOOPBACK_SIDEA_CHA_RELE_CONF 0x02000
#define LOOPBACK_SIDEA_CHB_RELE_CONF 0x04000
#define LOOPBACK_SIDEB_CHA_RELE_CONF 0x80010
#define EXT_1553_SIDE_A 0x0
#define EXT_1553_SIDE_B_SIMP1 0x12
#define EXT_1553_SIDE_B_SIMP2 0xB//0x3
#define EXT_1553_SIDE_A_EDDL 0x8
#define EXT_1553_SIDE_B_EDDL 0xC




#include "SIMP.h"

#include "global_types.h"
#include "TestInclude.h"
#include "Watch_Dog.h"
#include "Watch_Dog_Test.h"
#include "SIMPLoopbackCHASideB.h"
#include "DiscreteIF.h"
#include "DDLAddressTest.h"
#include "Singleton.h"
#include "ConfigFile.h"

SIMP::SIMP(VmeAbstractionDevice *adapter,  EN_SGA_ADDRESS sga) :
    TSAP(adapter)
    {
    //this->setSgaAddress(sga);
 /* switch (sga) {
	case EN_SGA_2:
		_baseAddress = BASE_ADDRESS_SGA2;
		break;
	case EN_SGA_3:
		_baseAddress = BASE_ADDRESS_SGA3;
		break;
	default:
		Logger::getLogger()->Log(ERROR_LEVEL, "SIMP SGA address not correct");
		break;
	}*/
}

UINT32 SIMP::execTest(const TestStruct& test) {
	I_TEST* iTest;
	UINT32 res = TEST_NOK;

	UINT32 currentConfig;
	GeneralConfigReg config;

	vmeAdapter->readConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),currentConfig);
	config.raw32 = currentConfig;
	config.reg.ENWDEXT = 0;
	config.reg.ENWDLS = 0;

/*	if(test._testNumber != EN_SIMP_WATCH_DOG ){
		if((test._testNumber != EN_INTERRUPT) || (test._step != 2)){
			vmeAdapter->readConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),currentConfig);
			config.raw32 = currentConfig;
			config.reg.ENWDEXT = 0;  Deve essere 0
			config.reg.ENWDLS = 0;  Deve essere 0
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		}
	}*/

	usleep(SEC_TO_USEC(2));

	if(test._testNumber < CUSTOM_TEST || test._testNumber == EN_SIMP_WATCH_DOG){
		if((test._testNumber == EN_LOOPBACK_A) || (test._testNumber == EN_LOOPBACK_LS_A)){
				if((test._configId == SIMP1_AVIONIC_3910) || (test._configId == SIMP2_ATTACK_3910))
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEA_CHA_RELE_CONF);
				else
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEB_CHA_RELE_CONF);
		}
		else if (test._testNumber == EN_LOOPBACK_B || (test._testNumber == EN_LOOPBACK_LS_B)){
			if((test._configId == SIMP1_AVIONIC_3910) || (test._configId == SIMP2_ATTACK_3910))
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEA_CHB_RELE_CONF);
		}
		else if(test._testNumber == EN_LS_RXTX || test._testNumber == EN_SIMP_WATCH_DOG
				|| test._testNumber == EN_SKELETON_BUS || test._testNumber == EN_INTERRUPT){
			switch(test._configId){

				case SIMP1_AVIONIC_3910: // SIMP1 SIDE A
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_A << 27);
				break;
				case SIMP1_BSD_EDDL:
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_A_EDDL << 27);
				break;
				case SIMP1_MDP_EDDL: // SIMP1 SIDE B
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_B_SIMP1 << 27);
				break;
				case SIMP1_CSMU_EDDL:
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_B_EDDL << 27);
				break;
				case SIMP2_ATTACK_3910: //SIMP2 SIDE A
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_A << 27);
				break;
				case SIMP2_EMU1_EDDL:
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_A_EDDL << 27);
				break;
				case SIMP2_UCS_3838: //SIMP2 SIDE B
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_B_SIMP2 << 27);
				break;
				case SIMP2_EMU2_EDDL:
					vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_B_EDDL << 27);
				break;

			}
		}
		else{
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),FOFE);
		}

		if(test._testNumber != EN_SIMP_WATCH_DOG){
			res = execCommonTest(test);
			return res;
		}
	}
	else if (test._testNumber == EN_SIMP_LOOPBACK_CHAN_A_SIDE_B){
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEB_CHA_RELE_CONF);
	}

	switch(test._testNumber){
		case EN_SIMP_WATCH_DOG:
			iTest = new Watch_Dog_Test();
			iTest->setDevice(vmeAdapter);
			res = iTest->execTest(test._configId,1,test._step);
		break;
		case EN_SIMP_WATCH_DOG_3910:
			iTest = new Watch_Dog();
			iTest->setDevice(vmeAdapter);
			res = iTest->execTest(test._configId,1,test._step);
		break;
		case EN_SIMP_DISCRETE_IF:
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
			usleep(SEC_TO_USEC(2));
			iTest = new Discrete_IF();
			iTest->setDevice(vmeAdapter);
			res = iTest->execTest(test._configId);
		break;
		case EN_SIMP_LOOPBACK_CHAN_A_SIDE_B:
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
			usleep(SEC_TO_USEC(2));
			iTest = new SIMP_Loopback_CH_A_Side_B();
			iTest->setDevice(vmeAdapter);
			res = iTest->execTest(test._configId,1,1);
			if(res == NEXT_STEP)
				res = iTest->execTest(test._configId,1,2);
		break;
		case EN_SIMP_DDL_ADDRESS_TEST:
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
			usleep(SEC_TO_USEC(2));
			iTest = new DDL_Address_Test();
			iTest->setDevice(vmeAdapter);
			res = iTest->execTest(test._configId);
		break;
	}
	if(res > NEXT_STEP){
		strcpy(this->errorMessage,iTest->getError());
	}
	//vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),currentConfig);
	delete iTest;
	return res;
}

void SIMP::initBoard() {

}

void SIMP::initSIMPBoard() {

}

