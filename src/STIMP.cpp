//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : STIMP.cpp
//  @ Date : 08/06/2012
//  @ Author : 
//
//


#include "STIMP.h"

#include "TestInclude.h"
#include "Program_BC.h"
#include "Verifica_Mod_BC.h"
#include "Verifica_Progr_BC.h"
#include "Watch_Dog.h"
#include "Watch_Dog_Test.h"
#include "BusyProgramBC.h"
#include "Logger.h"
#include "Singleton.h"
#include "ConfigFile.h"

#define FOFE 0x39DEF
#define LOOPBACK_SIDEA_CHA_RELE_CONF 0x02000
#define LOOPBACK_SIDEA_CHB_RELE_CONF 0x04000
#define LOOPBACK_SIDEB_CHA_RELE_CONF 0x40200
#define LOOPBACK_SIDEB_CHB_RELE_CONF 0x00000
#define EXT_1553_SIDE_A 0x0
#define EXT_1553_SIDE_B 0x3


STIMPboard::STIMPboard(VmeAbstractionDevice *adapter, EN_SGA_ADDRESS sga) :
TSAP(adapter)

{
	//	this->setSgaAddress(sga);
}


UINT32 STIMPboard::execTest(const TestStruct& test) {
	I_TEST* iTest;
	UINT32 res = TEST_NOK;

	UINT32 currentConfig;
	GeneralConfigReg config;

	vmeAdapter->readConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),currentConfig);
	config.raw32 = currentConfig;
	config.reg.ENWDEXT = 0;
	config.reg.ENWDLS = 0;

	vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_HANDOVER_REG", hexadecimal),0x0);
	//usleep(SEC_TO_USEC(2));

	if(test._testNumber < CUSTOM_TEST || test._testNumber == EN_STIMP_WATCH_DOG){
		if((test._testNumber == EN_LOOPBACK_A) || (test._testNumber == EN_LOOPBACK_LS_A)){
			if(test._configId == STIMP_ATTACK_3910)
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEA_CHA_RELE_CONF);
			else
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEB_CHA_RELE_CONF | (EXT_1553_SIDE_B << 27));

		}
		else if (test._testNumber == EN_LOOPBACK_B || (test._testNumber == EN_LOOPBACK_LS_B)){
			if(test._configId == STIMP_ATTACK_3910)
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEA_CHB_RELE_CONF);
			else
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),LOOPBACK_SIDEB_CHB_RELE_CONF | (EXT_1553_SIDE_B << 27));
		}
		else if(test._testNumber == EN_LS_RXTX || test._testNumber == EN_STIMP_WATCH_DOG
				|| test._testNumber == EN_SKELETON_BUS || test._testNumber == EN_INTERRUPT){
			if(test._configId == STIMP_ATTACK_3910)
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_A << 27);
			else
				vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EXT_1553_SIDE_B << 27);
		}
		else{
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),FOFE);
		}
		if(test._testNumber != EN_STIMP_WATCH_DOG){
			res = execCommonTest(test);
			return res;
		}
		//vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),currentConfig);

	}
	else if(test._testNumber == EN_STIMP_BC || test._testNumber == EN_STMIP_BC_BUSY_U44 ||
			test._testNumber == EN_STMIP_BC_BUSY_U22){
		if(test._configId == STIMP_ATTACK_3910)
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),(EXT_1553_SIDE_A << 27) | FOFE);
		else
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),(EXT_1553_SIDE_B << 27) | FOFE);
	}

	if(test._testNumber < CUSTOM_TEST){
		return execCommonTest(test);
	}

	switch(test._testNumber){
	case EN_STIMP_WATCH_DOG:
		iTest = new Watch_Dog_Test();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,test._step);
		break;
	case EN_STIMP_WATCH_DOG_3910:
		iTest = new Watch_Dog();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,test._step);
		break;
	case EN_STMIP_BC_BUSY_U44:
	case EN_STMIP_BC_BUSY_U22:
		if(test._step == 1){
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
			usleep(SEC_TO_USEC(2));
		}
		iTest = new Busy_Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,test._step);
	break;
	case EN_STIMP_BC:

		if(test._step == 1){
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
			vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
			usleep(SEC_TO_USEC(2));
		}
		iTest = new Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,test._step);
		break;
	case EN_STMIP_DISCRETE_INPUT_CRTITICAL:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Discrete_Input();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,1);
		break;
	case EN_STMIP_DISCRETE_OUTPUT_CRTITICAL:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Discrete_Output();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,1);
		break;
	case EN_STMIP_DISCRETE_INPUT_NOT_CRTITICAL:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Discrete_Input();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,0);
		break;
	case EN_STMIP_DISCRETE_OUTPUT_NOT_CRTITICAL:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Discrete_Output();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId,1,0);
		break;
	case EN_STIMP_HIACT_LODEM:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		if(res != TEST_OK){
			strcpy(this->errorMessage,iTest->getError());
			delete iTest;
			return res;
		}
		delete iTest;
		iTest = new HIACT_LODEM();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		break;
	case EN_STIMP_ACT_DEM:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		if(res != TEST_OK){
			strcpy(this->errorMessage,iTest->getError());
			delete iTest;
			return res;
		}
		delete iTest;
		iTest = new ACT_DEM();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		break;
	case EN_STIMP_ISNOGO:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		if(res != TEST_OK){
			strcpy(this->errorMessage,iTest->getError());
			delete iTest;
			return res;
		}
		delete iTest;
		iTest = new En_IsNoGo();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		break;
	case EN_STIMP_MOD_NOGO:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		if(res != TEST_OK){
			strcpy(this->errorMessage,iTest->getError());
			delete iTest;
			return res;
		}
		delete iTest;
		iTest = new Mod_Nogo();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		break;
	case EN_STIMP_NMI:
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),config.raw32);
		vmeAdapter->writeConf(Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_MCL_REG", hexadecimal),0); // Master Clear
		usleep(SEC_TO_USEC(2));
		iTest = new Program_BC();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		if(res != TEST_OK){
			strcpy(this->errorMessage,iTest->getError());
			delete iTest;
			return res;
		}
		delete iTest;
		iTest = new Nmi_3909();
		iTest->setDevice(vmeAdapter);
		res = iTest->execTest(test._configId);
		break;
	}

	if(res > NEXT_STEP){
		strcpy(this->errorMessage,iTest->getError());
	}

	delete iTest;
	return res;
}

void STIMPboard::initBoard() {

}

void STIMPboard::initSTIMPBoard() {

}

AllDiscreteType STIMPboard::readAllDiscrete(){
	AllDiscreteType discrete;
	try{
		discrete.general_config_reg.raw32 = this->read(Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT32>("VME_CONF_BASE_ADDRESS", hexadecimal) + Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_GENERAL_CONF_ADDRESS", hexadecimal),EN_VME_DOUBLE_WORD);
		discrete.discrete_reg.raw32 = this->read(Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT32>("VME_CONF_BASE_ADDRESS", hexadecimal) + Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_DISCRETE_IO_ADDRESS", hexadecimal),EN_VME_DOUBLE_WORD);
		discrete.handover_reg.raw32 = this->read(Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT32>("VME_CONF_BASE_ADDRESS", hexadecimal) + Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_HANDOVER_REG", hexadecimal),EN_VME_DOUBLE_WORD);

		//discrete.mil1553_reg.raw32 = this->read(VME_CONF_BASE_ADDRESS + VME_1553_ADDRESS,EN_VME_DOUBLE_WORD);

		/*
	discrete.sga_reg.raw32 = this->read(VME_CONF_BASE_ADDRESS + VME_SGA_ADDRESS,EN_VME_DOUBLE_WORD);
	discrete.rt_reg.raw32 = this->read(VME_CONF_BASE_ADDRESS + VME_REMOTE_TERM_ADDRESS,EN_VME_DOUBLE_WORD);
	discrete.fofe_reg.raw32 = this->read(VME_CONF_BASE_ADDRESS + Singleton<ConfigFile,CreateThreadSafe>::instance()->getParameter<UINT8>("VME_FOFE_ADDRESS", hexadecimal),EN_VME_DOUBLE_WORD);
		 */
	}
	catch(UINT8 & error){
		Logger::getLogger()->Log(DEBUG_LEVEL,"Read Error in readAllDiscrete");
	}
	return discrete;
}
