//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : TSAP.h
//  @ Date : 08/06/2012
//  Author: Emanuele Galli
//
//


#if !defined(_TSAP_H)
#define _TSAP_H

#include "I_TSAP.h"

#define SET_SGA(x) (1 << x)

#include "VmeAbstractionDevice.h"
#include "Singleton.h"
#include "ConfigFile.h"

class I_VmeAdapter;

/*!
 * class TSAP
 * Implements I_TSAP interface
 */
class TSAP : public I_TSAP{
public:
	/*!
	 * Default Constructor
	 */
	TSAP(VmeAbstractionDevice *adapter);

	/*!
	 * Sets base address with address argument and RAM size with size argument
	 * @param address Base address
	 * @param size Ram size
	 */
	TSAP(VmeAbstractionDevice *adapter,UINT32 address, UINT32 size);
	virtual ~TSAP();

	/*!
	 * Sets new base address
	 * @param address Base address
	 */
	void setBaseAddress(UINT32 address);

	/*!
	 * Sets new RAM size
	 * @param size
	 */
	void setRamSize(UINT32 size);

	/*!
	 * Stets SGA board address
	 * @param sga
	 */
	void setSgaAddress(EN_SGA_ADDRESS sga);

	/*!
	 *
	 * @param address
	 * @return
	 */
	unsigned int read(UINT32 address, const EN_VME_READWRITE_SIZE& align = EN_VME_WORD);

	/*!
	 *
	 * @param data
	 * @param address
	 */
	void write(UINT32 data, UINT32 address, const EN_VME_READWRITE_SIZE& align = EN_VME_WORD);

	/*!
	 * Exec a test identified by \c testNumber argument
	 * @param testNumber Test to be executed
	 * @param step If test is composed of different steps, then next step to be executed has to be given
	 * @return Return 0 on success
	 */
	virtual UINT32 execTest(const TestStruct& test);

	/*!
	 * Inizializes TSAP board
	 */
	void initBoard();

	/**
	 * Reads all discrete status
	 * @return Returns a vector
	 */
	AllDiscreteType readAllDiscrete();

	/**
	 * Setup the remote terminal via software, if a configuration exists
	 */
	void setupRemoteTerminal();

protected:
	/**
	 * Exec Common Test
	 */
	UINT32 execCommonTest(const TestStruct& test);

	unsigned int _baseAddress;
	unsigned int _ramSize;
	SGAReg _sgaAddress;


private:
	void initTSAPBoard();
};

inline void TSAP::setBaseAddress(UINT32 address){
	_baseAddress = address;
}

inline void TSAP::setRamSize(UINT32 size){
	_ramSize = size;
}

inline void TSAP::setSgaAddress(EN_SGA_ADDRESS sga){
	_sgaAddress.raw32 = SET_SGA(sga);
	_sgaAddress.reg.SGA_SEL = 1;
	this->vmeAdapter->writeConf(Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT16>("VME_CONF_BASE_ADDRESS", hexadecimal) + Singleton<ConfigFile, CreateThreadSafe>::instance()->getParameter<UINT16>("VME_SGA_ADDRESS", hexadecimal), _sgaAddress.raw32);
}

#endif  //_TSAP_H
