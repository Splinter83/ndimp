/*
 * Utils.h
 *
 *  Created on: 26/giu/2012
 *      Author: emanuele_galli
 */

#ifndef UTILS_H_
#define UTILS_H_

#include "global_definitions.h"
#include "global_types.h"
#include <string>
#include <iostream>
#include <sstream>
#include <fstream>

class Utils {
public:

	template <typename T>
	static inline T& cast_from_hex(const std::string& str){
		T out;
		std::stringstream ss;
		ss << std::hex << str;
		ss >> out;
		return out;
	}

	template<typename T2, typename T1>
	static inline T2 lexical_cast(const T1 &in) {
	    T2 out;
	    std::stringstream ss;
	    ss << in;
	    ss >> out;
	    return out;
	}

	static inline std::string OptimizeXmlMessage(const std::string &xml){
		std::string body = xml;
		UINT32 index = body.find("\n\n");
		//Remove unuseful characters like \n\n
		while((index != (UINT32) std::string::npos) && (index < body.length())){
			//dbg> std::cout<<"Index:"<<index<<std::endl;
			body.replace(index,2,"\r\n");
			index = body.find("\n\n");
		}

		index = body.find_last_of('>');
		if((index != std::string::npos) && (index < body.length()))
			body = body.substr(0,index+1);

		//Remove standalone properties
		index = body.find("standalone");
		if(index != std::string::npos)
			body.erase(index,15);

		return body;
	}

	template<class T>
	static inline UINT8 CalcOddParity(const T &addr){
		UINT32 bit_size = sizeof(T) * 8;
		UINT32 counter = 0;
		T tmp = addr;
		for(UINT32 i = 0; i < bit_size; ++i){
			if(tmp & 0x1)
				++counter;
			tmp >>= 1;
		}
		return ((counter+1)%2);
	}

	//! Return 'True' if the file is present.
	bool isFile(const char *filename){
		std::ifstream ifile(filename);
		return ifile;
	}
};

#endif /* UTILS_H_ */
