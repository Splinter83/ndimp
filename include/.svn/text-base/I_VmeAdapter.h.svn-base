//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : I_VmeAdapter.h
//  @ Date : 08/06/2012
//  Author: Emanuele Galli
//   *  Copyright 2012 Sky-Technologies Srl.
//


#if !defined(_I_VMEADAPTER_H)
#define _I_VMEADAPTER_H

#include "global_types.h"
#include <string>

typedef void (*ExternalCallBack)(INT32);

/*!
 * \interface I_VmeAdapter
 */
class I_VmeAdapter {
public:
	/**
	 * Destructor
	 */
	virtual ~I_VmeAdapter(){}

	/**
	 * Initializes board opening PCI device and control device
	 * @throw An exception on error with a string containing error information
	 */
	virtual void initBoard() throw(std::string)= 0;

	/**
	 * Closes device
	 */
	virtual void closeDevice()= 0;

	/**
	 * Writes a byte using byte alignment
	 * @param regAddress Address
	 * @param value Value to be written
	 * @throw An exception on error with a string containing error information
	 */
	virtual void write8(UINT32 regAddress, UINT8 value) throw(std::string)= 0;

	/**
	 * Writes a word using word alignment
	 * @param regAddress Address
	 * @param value Value to be written
	 * @throw An exception on error with a string containing error information
	 */
	virtual void write16(UINT32 regAddress, UINT16 value) throw(std::string)= 0;

	/**
	 * Writes a triple byte using triple byte alignment
	 * @param regAddress Address
	 * @param value Value to be written
	 * @throw An exception on error with a string containing error information
	 */
	virtual void write24(UINT32 regAddress, UINT32 value) throw(std::string)= 0;

	/**
	 * Writes a double word using double word alignment
	 * @param regAddress Address
	 * @param value Value to be written
	 * @throw An exception on error with a string containing error information
	 */
	virtual void write32(UINT32 regAddr, UINT32 val) throw(std::string)= 0;

	/**
	 * Reads a byte from address regAddr32
	 * @param regAddr32
	 * @return A byte
	 * @throw An exception on error with a string containing error information
	 */
	virtual UINT8 read8(UINT32 regAddr32) throw(std::string)= 0;

	/**
	 * Reads a word from address regAddr32
	 * @param regAddr32
	 * @return A word
	 * @throw An exception on error with a string containing error information
	 */
	virtual UINT16 read16(UINT32 regAddr32) throw(std::string)= 0;

	/**
	 * Reads a triple byte from address regAddr32
	 * @param regAddr32
	 * @return A triple byte
	 * @throw An exception on error with a string containing error information
	 */
	virtual UINT32 read24(UINT32 regAddr32) throw(std::string)= 0;

	/**
	 * Reads a double word from address regAddr32
	 * @param regAddr32
	 * @return A double word
	 * @throw An exception on error with a string containing error information
	 */
	virtual UINT32 read32(UINT32 regAddr32) throw(std::string)= 0;

	/**
	 * Read on a register of FPGA optimized bus controller
	 * @param regAddr Register Address
	 * @return Read value
	 * @throw An exception on error with a string containing error information
	 */
	virtual UINT32 readRegister(UINT32 regAddr) throw(std::string)= 0;

	/**
	 * Write on a register of FPGA optimized bus controller
	 * @param regAddr Register Address
	 * @param val Value to be written
	 * @throw An exception on error with a string containing error information
	 */
	virtual void writeRegister(UINT32 regAddr, UINT32 val) throw(std::string)= 0;

	/**
	 * Reads interrupt information
	 * @param status
	 * @throw An exception on error with a string containing error information
	 */
	virtual void readInterruptStatus(UINT32* status) throw(std::string) = 0;

	/**
	 * Waits for interrupt on VME board
	 * @param status 0 to wait for ever, otherwise number of ticks
	 * @throw An exception on error: 1 for timeout, otherwise 0 for invalid interrupts
	 */
	virtual void waitInterrupt(const UINT32 &time) throw(int) = 0;
};

#endif  //_I_VMEADAPTER_H
