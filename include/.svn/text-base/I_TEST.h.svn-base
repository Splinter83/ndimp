//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : I_TEST.h
//  @ Date : 08/06/2012
//  Author: Emanuele Galli
//
//  Copyright 2012 Sky-Technologies Srl.
//
//


#if !defined(_I_TEST_H)
#define _I_TEST_H

#include "VmeAbstractionDevice.h"
#include "global_types.h"

enum TEST_RESULT{
	TEST_OK = 0,
	NEXT_STEP,
	TEST_NOK,
	TEST_CUSTOM_ERR
};

/*!
 *\interface I_TEST
 */
class I_TEST {
public:
	//I_TEST(VmeAbstractionDevice<int> *device){vmeDev = device;}
	//virtual UINT8 execTest(int step = 0) = 0;
	virtual ~I_TEST(){}
	/**
	 * Exec test for a specific board interface type. If more parameters are need,
	 * then num_arguments shall be set to total optional parameters
	 * @param BoardInterfaceType Interface type
	 * @param num_arguments Total optional parameters
	 * @return 0 if test is passed, a value greatest then zero otherwise
	 */
	virtual UINT8 execTest(const BoardInterfaceType&, int num_arguments = 0, ...) = 0;
	//virtual void setDevice(VmeAbstractionDevice *device) = 0;
	void setDevice(const VmeAbstractionDevice *device) {
		vmeDev = const_cast<VmeAbstractionDevice *>(device);
	}

	const char* getError();

protected:
	VmeAbstractionDevice *vmeDev;
	UINT32 BASE_ADDRESS;
	char strError[MAX_BUF_SIZE];
};

inline const char* I_TEST::getError(){
	return strError;
}

#endif  //_I_TEST_H
