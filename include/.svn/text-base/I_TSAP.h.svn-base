//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : I_TSAP.h
//  @ Date : 08/06/2012
//  Author: Emanuele Galli
//   *  Copyright 2012 Sky-Technologies Srl.
//


#if !defined(_I_TSAP_H)
#define _I_TSAP_H

#include "global_definitions.h"
#include "global_types.h"

class I_TEST;
class VmeAbstractionDevice;

/*!
 * \interface I_TSAP
 */
class I_TSAP {
public:
	/**
	 * Constructor
	 * @param adapter
	 */
	I_TSAP(VmeAbstractionDevice *adapter) :
			vmeAdapter(adapter),
			_baseAddress(0){
		memset(errorMessage,0,MAX_BUF_SIZE);
	}
	/**
	 * Destructor. Destroys VmeAbstractionDevice object
	 */
	virtual ~I_TSAP(){}

	/**
	 * Reads data at address param
	 * @param address Address to be read
	 * @return Read value
	 */
	virtual unsigned int read(UINT32 address, const EN_VME_READWRITE_SIZE& align = EN_VME_WORD) = 0;

	/**
	 * Writes data param at address param
	 * @param data Data to be written
	 * @param address Address to be written
	 */
	virtual void write(UINT32 data, UINT32 address, const EN_VME_READWRITE_SIZE& align = EN_VME_WORD) = 0;

	/**
	 * Run a test
	 * @param test Struct with information of test to be executed
	 * @return 0 if ok, otherwise a value greatest than 0
	 */
	virtual UINT32 execTest(const TestStruct& test) = 0;

	/**
	 * Initialize board with configuration global data
	 */
	virtual void initBoard() = 0;

	/**
	 * Sets current VME adapter
	 * @param adapter Pointer to VME adapter. Destroys the previous one.
	 */
	void setVmeAdapter(VmeAbstractionDevice *adapter);

	/**
	 * Reads all discretes
	 * @return A strcut with all current discrete value
	 */
	virtual AllDiscreteType readAllDiscrete() = 0;


	/**
	 * Setup the remote terminal via software, if a configuration exists
	 */
	virtual void setupRemoteTerminal() = 0;

	/**
	 * Returns last error information
	 * @return A string with last error information
	 */
	const char* getLastError();

protected:
	VmeAbstractionDevice *vmeAdapter;
	UINT32 _baseAddress;
	char errorMessage[MAX_BUF_SIZE];
};

inline const char* I_TSAP::getLastError(){
	return errorMessage;
}

#endif  //_I_TSAP_H
