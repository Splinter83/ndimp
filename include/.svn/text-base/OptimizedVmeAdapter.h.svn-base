//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : OptimizedVmeAdapter.h
//  @ Date : 08/06/2012
//  Author: Emanuele Galli
//   *  Copyright 2012 Sky-Technologies Srl.
//


#if !defined(_OPTIMIZEDVMEADAPTER_H)
#define _OPTIMIZEDVMEADAPTER_H



#include "I_VmeAdapter.h"
#include <stdexcept>

#include "OPB_interface.h"
#include "VMEInterruptHandlerThread.h"

#define INTERRUPT_ACK_ADDR 0x20000008

/*!
 * \class OptimizedVmeAdapter
 */
class OptimizedVmeAdapter : public I_VmeAdapter{

public:
	OptimizedVmeAdapter();
	virtual ~OptimizedVmeAdapter();

	void initBoard() throw(std::string);

	void closeDevice() throw(std::string);

	void write8(UINT32 regAddr, UINT8 value) throw(std::string);

	void write16(UINT32 regAddr, UINT16 value) throw(std::string);

	void write24(UINT32 regAddr, UINT32 value) throw(std::string);

	void write32(UINT32 regAddr, UINT32 val) throw(std::string);

	UINT8 read8(UINT32 regAddr16) throw(std::string);

	UINT16 read16(UINT32 regAddr16) throw(std::string);

	UINT32 read24(UINT32 regAddr16) throw(std::string);

	UINT32 read32(UINT32 regAddr32) throw(std::string);

	/**
	 * Read on a register of FPGA optimized bus controller
	 * @param regAddr Register Address
	 * @return Read value
	 * @throw An exception on error with a string containing error information
	 */
	UINT32 readRegister(UINT32 regAddr) throw(std::string);

	/**
	 * Write on a register of FPGA optimized bus controller
	 * @param regAddr Register Address
	 * @param val Value to be written
	 * @throw An exception on error with a string containing error information
	 */
	void writeRegister(UINT32 regAddr, UINT32 val) throw(std::string);

	void readInterruptStatus(UINT32* status) throw(std::string);

	void waitInterrupt(const UINT32 &time) throw(int);

private:
	INT32 _devHandle;
	INT32 _devOptHandle;
	INT32 _ctlHandle;
	UINT32 _vmeOptBaseAddress;
	UINT32 _currentOpbDataWidth;
	VME_InterruptHandlerThread *_pInterruptHandler;
	ExternalCallBack _callback;

private:
	int updateVmeAddress(const UINT32 addr, const UINT32 data_width = EN_VME_D16);
	ExternalCallBack getExternalCallback() const;
	static void interruptCallback(void *arg);
};

inline ExternalCallBack OptimizedVmeAdapter::getExternalCallback() const{
	return _callback;
}

#endif  //_OPTIMIZEDVMEADAPTER_H
