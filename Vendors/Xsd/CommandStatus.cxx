// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "CommandStatus.hxx"

namespace cs
{
  // CommandStatus
  // 

  const CommandStatus::Result_type& CommandStatus::
  Result () const
  {
    return this->Result_.get ();
  }

  CommandStatus::Result_type& CommandStatus::
  Result ()
  {
    return this->Result_.get ();
  }

  void CommandStatus::
  Result (const Result_type& x)
  {
    this->Result_.set (x);
  }

  const CommandStatus::CurrentStep_type& CommandStatus::
  CurrentStep () const
  {
    return this->CurrentStep_.get ();
  }

  CommandStatus::CurrentStep_type& CommandStatus::
  CurrentStep ()
  {
    return this->CurrentStep_.get ();
  }

  void CommandStatus::
  CurrentStep (const CurrentStep_type& x)
  {
    this->CurrentStep_.set (x);
  }

  const CommandStatus::IsTerminated_type& CommandStatus::
  IsTerminated () const
  {
    return this->IsTerminated_.get ();
  }

  CommandStatus::IsTerminated_type& CommandStatus::
  IsTerminated ()
  {
    return this->IsTerminated_.get ();
  }

  void CommandStatus::
  IsTerminated (const IsTerminated_type& x)
  {
    this->IsTerminated_.set (x);
  }

  const CommandStatus::Text_optional& CommandStatus::
  Text () const
  {
    return this->Text_;
  }

  CommandStatus::Text_optional& CommandStatus::
  Text ()
  {
    return this->Text_;
  }

  void CommandStatus::
  Text (const Text_type& x)
  {
    this->Text_.set (x);
  }

  void CommandStatus::
  Text (const Text_optional& x)
  {
    this->Text_ = x;
  }

  void CommandStatus::
  Text (::std::auto_ptr< Text_type > x)
  {
    this->Text_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace cs
{
  // CommandStatus
  //

  CommandStatus::
  CommandStatus (const Result_type& Result,
                 const CurrentStep_type& CurrentStep,
                 const IsTerminated_type& IsTerminated)
  : ::xml_schema::type (),
    Result_ (Result, ::xml_schema::flags (), this),
    CurrentStep_ (CurrentStep, ::xml_schema::flags (), this),
    IsTerminated_ (IsTerminated, ::xml_schema::flags (), this),
    Text_ (::xml_schema::flags (), this)
  {
  }

  CommandStatus::
  CommandStatus (const CommandStatus& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Result_ (x.Result_, f, this),
    CurrentStep_ (x.CurrentStep_, f, this),
    IsTerminated_ (x.IsTerminated_, f, this),
    Text_ (x.Text_, f, this)
  {
  }

  CommandStatus::
  CommandStatus (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Result_ (f, this),
    CurrentStep_ (f, this),
    IsTerminated_ (f, this),
    Text_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void CommandStatus::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Result
      //
      if (n.name () == "Result" && n.namespace_ ().empty ())
      {
        if (!Result_.present ())
        {
          this->Result_.set (Result_traits::create (i, f, this));
          continue;
        }
      }

      // CurrentStep
      //
      if (n.name () == "CurrentStep" && n.namespace_ ().empty ())
      {
        if (!CurrentStep_.present ())
        {
          this->CurrentStep_.set (CurrentStep_traits::create (i, f, this));
          continue;
        }
      }

      // IsTerminated
      //
      if (n.name () == "IsTerminated" && n.namespace_ ().empty ())
      {
        if (!IsTerminated_.present ())
        {
          this->IsTerminated_.set (IsTerminated_traits::create (i, f, this));
          continue;
        }
      }

      // Text
      //
      if (n.name () == "Text" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Text_type > r (
          Text_traits::create (i, f, this));

        if (!this->Text_)
        {
          this->Text_.set (r);
          continue;
        }
      }

      break;
    }

    if (!Result_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Result",
        "");
    }

    if (!CurrentStep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CurrentStep",
        "");
    }

    if (!IsTerminated_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "IsTerminated",
        "");
    }
  }

  CommandStatus* CommandStatus::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class CommandStatus (*this, f, c);
  }

  CommandStatus::
  ~CommandStatus ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace cs
{
  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::cs::CommandStatus > r (
      ::cs::CommandStatus_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::cs::CommandStatus > r (
      ::cs::CommandStatus_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::cs::CommandStatus > r (
      ::cs::CommandStatus_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::cs::CommandStatus_ (isrc, f, p);
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::cs::CommandStatus_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::cs::CommandStatus_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::cs::CommandStatus_ (isrc, f, p);
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::cs::CommandStatus_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::cs::CommandStatus_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::cs::CommandStatus > r (
      ::cs::CommandStatus_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::cs::CommandStatus > r (
      ::cs::CommandStatus_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::cs::CommandStatus > r (
      ::cs::CommandStatus_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::cs::CommandStatus > r (
        ::cs::CommandStatus_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CommandStatus" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::cs::CommandStatus > r (
        ::xsd::cxx::tree::traits< ::cs::CommandStatus, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CommandStatus",
      "");
  }

  ::std::auto_ptr< ::cs::CommandStatus >
  CommandStatus_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CommandStatus" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::cs::CommandStatus > r (
        ::xsd::cxx::tree::traits< ::cs::CommandStatus, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CommandStatus",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace cs
{
  void
  CommandStatus_ (::std::ostream& o,
                  const ::cs::CommandStatus& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::cs::CommandStatus_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CommandStatus_ (::std::ostream& o,
                  const ::cs::CommandStatus& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::cs::CommandStatus_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CommandStatus_ (::std::ostream& o,
                  const ::cs::CommandStatus& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::cs::CommandStatus_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CommandStatus_ (::xercesc::XMLFormatTarget& t,
                  const ::cs::CommandStatus& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::cs::CommandStatus_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CommandStatus_ (::xercesc::XMLFormatTarget& t,
                  const ::cs::CommandStatus& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::cs::CommandStatus_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CommandStatus_ (::xercesc::XMLFormatTarget& t,
                  const ::cs::CommandStatus& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::cs::CommandStatus_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CommandStatus_ (::xercesc::DOMDocument& d,
                  const ::cs::CommandStatus& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CommandStatus" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CommandStatus",
        "");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CommandStatus_ (const ::cs::CommandStatus& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "CommandStatus",
        "",
        m, f));

    ::cs::CommandStatus_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const CommandStatus& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Result
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Result",
          e));

      s << i.Result ();
    }

    // CurrentStep
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CurrentStep",
          e));

      s << i.CurrentStep ();
    }

    // IsTerminated
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IsTerminated",
          e));

      s << i.IsTerminated ();
    }

    // Text
    //
    if (i.Text ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Text",
          e));

      s << *i.Text ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

